u have done grate but look at thse forms properly  befor i give you the next instruction 
from django.db import models
from django.utils import timezone
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from django.utils.translation import gettext_lazy as _


# ----------------------- USER MANAGER -----------------------
class CustomUserManager(BaseUserManager):
    def create_user(self, username, first_name, last_name, email, password=None, **extra_fields):
        """Create and return a regular user with given details"""
        if not username:
            raise ValueError(_('The Username field is required'))
        if not first_name:
            raise ValueError(_('The First Name field is required'))
        if not last_name:
            raise ValueError(_('The Last Name field is required'))
        if not email:
            raise ValueError(_('The Email field is required'))

        email = self.normalize_email(email)
        user = self.model(
            username=username,
            first_name=first_name,
            last_name=last_name,
            email=email,
            **extra_fields
        )
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, username, first_name, last_name, email, password=None, **extra_fields):
        """Create and return a superuser with all permissions"""
        extra_fields.setdefault('is_superuser', True)
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_doctor', True)
        extra_fields.setdefault('is_patient', True)
        extra_fields.setdefault('is_hospital', True)

        return self.create_user(username, first_name, last_name, email, password, **extra_fields)


# ----------------------- USER MODEL -----------------------
class User(AbstractBaseUser, PermissionsMixin):
    """
    Central user model shared across doctors, patients, and hospitals.
    """
    username = models.CharField(max_length=150, unique=True)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.EmailField(unique=True)

    # Common Details
    date_of_birth = models.DateField(null=True, blank=True)
    nin = models.CharField(max_length=20, unique=True, null=True, blank=True)
    marital_status = models.CharField(
        max_length=20,
        choices=[('Single', 'Single'), ('Married', 'Married')],
        null=True, blank=True
    )
    contact = models.CharField(max_length=15, null=True, blank=True)
    health_insurance_details = models.TextField(null=True, blank=True)
    government_scheme_eligibility = models.TextField(null=True, blank=True)

    # Role-based Flags
    is_doctor = models.BooleanField(default=False)
    is_patient = models.BooleanField(default=False)
    is_hospital = models.BooleanField(default=False)

    # System Fields
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(auto_now=True)

    objects = CustomUserManager()

    USERNAME_FIELD = 'username'
    REQUIRED_FIELDS = ['first_name', 'last_name', 'email']

    def __str__(self):
        return self.username


# ----------------------- LOCATION MODEL -----------------------
class Location(models.Model):
    """
    Stores location details for users (patients, doctors, hospitals).
    """
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="location")
    village = models.CharField(max_length=255, null=True, blank=True)
    parish = models.CharField(max_length=255, null=True, blank=True)
    sub_county = models.CharField(max_length=255, null=True, blank=True)
    district = models.CharField(max_length=255, null=True, blank=True)
    address = models.TextField(null=True, blank=True)  # Generic address field

    def __str__(self):
        return f"Location for {self.user.username}"


# ----------------------- PATIENT MODEL -----------------------
class Patient(models.Model):
    """
    Stores patient-specific details.
    """
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="patient_profile")
    age = models.IntegerField(null=True, blank=True)
    home_address = models.TextField(null=True, blank=True)
    number_of_children = models.IntegerField(null=True, blank=True)
    date_of_last_period = models.DateField(null=True, blank=True)
    occupation = models.CharField(max_length=255, null=True, blank=True)

    # Pregnancy & Medical History
    gestational_age = models.IntegerField(null=True, blank=True)  # Weeks of pregnancy
    expected_due_date = models.DateField(null=True, blank=True)
    type_of_pregnancy = models.CharField(max_length=20, choices=[('Single', 'Single'), ('Twins', 'Twins'), ('Multiples', 'Multiples')], null=True, blank=True)
    previous_pregnancies = models.IntegerField(null=True, blank=True)
    delivery_history = models.TextField(null=True, blank=True)
    high_risk_factors = models.TextField(null=True, blank=True)
    fetal_health = models.TextField(null=True, blank=True)

    # Medical History
    pre_existing_conditions = models.TextField(null=True, blank=True)
    previous_surgeries = models.TextField(null=True, blank=True)
    current_medications = models.TextField(null=True, blank=True)
    allergies = models.TextField(null=True, blank=True)
    blood_type = models.CharField(max_length=5, null=True, blank=True)
    family_medical_history = models.TextField(null=True, blank=True)

    # Lifestyle
    diet_preferences = models.TextField(null=True, blank=True)
    exercise_level = models.TextField(null=True, blank=True)
    smoking_alcohol_drug_use = models.TextField(null=True, blank=True)
    mental_health_status = models.TextField(null=True, blank=True)

    def __str__(self):
        return f"Patient Profile: {self.user.username}"


# ----------------------- DOCTOR MODEL -----------------------
class Doctor(models.Model):
    """
    Stores doctor-specific details.
    """
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="doctor_profile")
    work_address = models.TextField(null=True, blank=True)
    certificate_number = models.CharField(max_length=100, unique=True)
    contact_number = models.CharField(max_length=15, null=True, blank=True)
    health_facility = models.CharField(max_length=255, null=True, blank=True)
    medical_field = models.CharField(max_length=255, null=True, blank=True)
    experience_years = models.IntegerField(null=True, blank=True)
    education_level = models.CharField(max_length=255, null=True, blank=True)
    rank_title = models.CharField(max_length=255, null=True, blank=True)

    def __str__(self):
        return f"Dr. {self.user.first_name} {self.user.last_name}"


# ----------------------- HOSPITAL MODEL -----------------------
class Hospital(models.Model):
    """
    Stores hospital-specific details.
    """
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="hospital_profile")
    name = models.CharField(max_length=255, unique=True)
    rank_reviews = models.TextField(null=True, blank=True)
    departments = models.TextField(null=True, blank=True)
    bed_availability = models.IntegerField(null=True, blank=True)
    maternity_ward_occupancy = models.IntegerField(null=True, blank=True)
    number_of_healthcare_professionals = models.IntegerField(null=True, blank=True)
    ambulance_response_time = models.CharField(max_length=255, null=True, blank=True)
    specialized_maternity_care = models.TextField(null=True, blank=True)
    delivery_facilities = models.TextField(null=True, blank=True)
    blood_bank_availability = models.BooleanField(default=False)
    room_types_facilities = models.TextField(null=True, blank=True)
    infection_control_measures = models.TextField(null=True, blank=True)
    delivery_package_costs = models.TextField(null=True, blank=True)
    insurance_coverage = models.TextField(null=True, blank=True)
    government_schemes_supported = models.TextField(null=True, blank=True)

    def __str__(self):
        return f"Hospital: {self.name}"
 and the antenatal
 from django.db import models
from accounts.models import User
from django.utils.timezone import now

class AntenatalCard(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='antenatal_patients')  # Links to the registered patient
    Doctor = models.ForeignKey(User, on_delete=models.CASCADE, related_name='antenatal_doctors', default=1)  # Links to the assigned doctor
    
    health_unit = models.CharField(max_length=255)  # Health facility name
    reg_no = models.CharField(max_length=100, unique=True)  # Unique registration number
    name = models.CharField(max_length=255)  # Patient's full name
    nin = models.CharField(max_length=20, unique=True, null=True, blank=True)  # National ID Number
    phone_no = models.CharField(max_length=15)  
    age = models.IntegerField()  
    village = models.CharField(max_length=255)  
    parish = models.CharField(max_length=255)  
    sub_county = models.CharField(max_length=255)  
    district = models.CharField(max_length=255)  
    occupation = models.CharField(max_length=255)  
    religion = models.CharField(max_length=100, null=True, blank=True)  
    education_level = models.CharField(max_length=100, null=True, blank=True)  
    tribe = models.CharField(max_length=100, null=True, blank=True)  
    marital_status = models.CharField(
        max_length=20, choices=[('Single', 'Single'), ('Married', 'Married')]
    )

    next_of_kin_name = models.CharField(max_length=255)  
    next_of_kin_phone = models.CharField(max_length=15)  
    next_of_kin_relationship = models.CharField(max_length=100)  
    next_of_kin_address = models.TextField()  

    gravida = models.IntegerField()  # Number of pregnancies
    para = models.IntegerField()  # Number of deliveries after 28 weeks
    abortions = models.IntegerField()  # Number of pregnancy losses before 28 weeks

    presenting_complaints = models.TextField(null=True, blank=True)  
    first_day_of_lnmp = models.DateField()  # Last Normal Menstrual Period
    edd = models.DateField()  # Estimated Due Date
    weeks_of_amenorrhea = models.IntegerField()  # Number of weeks since last period
    complications_of_pregnancy = models.TextField(null=True, blank=True)  
    hospitalization = models.BooleanField(default=False)  
    hospitalization_reason = models.TextField(null=True, blank=True)
    Doctor = models.ForeignKey(User, on_delete=models.CASCADE)
    
    next_visit = models.DateTimeField(null=True, blank=True)  # Date and time of the next visit
  

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Antenatal Card for {self.name} ({self.reg_no})"

# ----------------------- SEPARATE TABLES FOR TABULAR DATA -----------------------

class PreviousObstetricHistory(models.Model):
    antenatal_card = models.ForeignKey(AntenatalCard, on_delete=models.CASCADE, related_name="previous_obstetric_history")
    recorded_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    pregnancy_year = models.IntegerField()
    abortions_below_12_weeks = models.IntegerField()
    abortions_above_12_weeks = models.IntegerField()
    premature_births = models.IntegerField()
    full_term_deliveries = models.IntegerField()
    delivery_type = models.CharField(max_length=255)
    place_of_delivery = models.CharField(max_length=255)
    third_stage_complications = models.TextField(null=True, blank=True)
    puerperium = models.TextField(null=True, blank=True)
    baby_alive = models.BooleanField(default=True)
    stillbirth_or_nnd = models.BooleanField(default=False)
    baby_sex = models.CharField(max_length=10, choices=[('Male', 'Male'), ('Female', 'Female')])
    birth_weight = models.FloatField()
    immunization_status = models.CharField(max_length=255)
    baby_health_condition = models.TextField(null=True, blank=True)
    
    created_at = models.DateTimeField(default=now)

    def __str__(self):
        return f"Previous Pregnancy Record ({self.pregnancy_year}) for {self.antenatal_card.name}"


class AntenatalProgressExamination(models.Model):
    antenatal_card = models.ForeignKey(AntenatalCard, on_delete=models.CASCADE, related_name="progress_examinations")
    recorded_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    visit_date = models.DateField(default=now)
    fundal_height = models.FloatField()
    presentation = models.CharField(max_length=255)
    fetal_heart_rate = models.IntegerField()
    varicose_or_oedema = models.CharField(max_length=255, null=True, blank=True)
    urine_test_results = models.TextField(null=True, blank=True)
    iron_folic_acid_pills = models.IntegerField(null=True, blank=True)
    complaints_and_remarks = models.TextField(null=True, blank=True)

    created_at = models.DateTimeField(default=now)

    def __str__(self):
        return f"Antenatal Progress for {self.antenatal_card.name} on {self.visit_date}"


class UltrasoundReport(models.Model):
    antenatal_card = models.ForeignKey(AntenatalCard, on_delete=models.CASCADE, related_name="ultrasound_reports")
    recorded_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    ultrasound_date = models.DateField(default=now)
    gestational_age = models.IntegerField(null=True, blank=True)
    placenta_details = models.TextField(null=True, blank=True)
    amniotic_fluid = models.TextField(null=True, blank=True)
    complications = models.TextField(null=True, blank=True)

    created_at = models.DateTimeField(default=now)

    def __str__(self):
        return f"Ultrasound Report for {self.antenatal_card.name} on {self.ultrasound_date}"


class Prescription(models.Model):
    patient = models.ForeignKey(User, related_name='prescriptions', on_delete=models.CASCADE)  # Links to the registered patient
    doctor = models.ForeignKey(User, related_name='prescribed_by', on_delete=models.CASCADE)  # Links to the doctor who prescribed
    disease_condition = models.CharField(max_length=255)  # Disease or condition the patient is being treated for
    prescription_date = models.DateField(default=now)  # Date the prescription was made
    follow_up_date = models.DateField()  # Latest date when the patient should have this checked
    extra_information = models.TextField(null=True, blank=True)  # Any additional information about the prescription
    cleared = models.BooleanField(default=False)  # Whether the prescription has been cleared or not
    cleared_date = models.DateTimeField(null=True, blank=True)  # Date when the prescription was cleared

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Prescription for {self.patient.username} prescribed by {self.doctor.username} for {self.disease_condition}"

class Medication(models.Model):
    """
    Model to handle the medications within a prescription.
    Links to a Prescription and stores dosage, medication name, and prescription date.
    """
    prescription = models.ForeignKey(Prescription, related_name='medications', on_delete=models.CASCADE)
    medication_name = models.CharField(max_length=255)  # Medication prescribed
    dosage = models.TextField()  # Dosage instructions
    prescription_date = models.DateField(default=now)  # Date the medication was prescribed

    def __str__(self):
        return f"{self.medication_name} prescribed on {self.prescription_date}"

so wat u had done worked but it is doing the wrong this 
i need thi view to be updateing two modesl for the same user id 
the patients model the following fields 
 gestational_age = models.IntegerField(null=True, blank=True)  # Weeks of pregnancy
    expected_due_date = models.DateField(null=True, blank=True)
    type_of_pregnancy = models.CharField(max_length=20, choices=[('Single', 'Single'), ('Twins', 'Twins'), ('Multiples', 'Multiples')], null=True, blank=True)
    previous_pregnancies = models.IntegerField(null=True, blank=True)
    delivery_history = models.TextField(null=True, blank=True)
    high_risk_factors = models.TextField(null=True, blank=True)
    fetal_health = models.TextField(null=True, blank=True)

    # Medical History
    pre_existing_conditions = models.TextField(null=True, blank=True)
    previous_surgeries = models.TextField(null=True, blank=True)
    current_medications = models.TextField(null=True, blank=True)
    allergies = models.TextField(null=True, blank=True)
    blood_type = models.CharField(max_length=5, null=True, blank=True)
    family_medical_history = models.TextField(null=True, blank=True)

    # Lifestyle
    diet_preferences = models.TextField(null=True, blank=True)
    exercise_level = models.TextField(null=True, blank=True)
    smoking_alcohol_drug_use = models.TextField(null=True, blank=True)
    mental_health_status = models.TextField(null=True, blank=True)

and wen all those have been filled in (these are the ones that should be made a form out of rendered to the template with the  form input fields designed  )
and wen they have been filled the we will have to create an instance of an antenetal card where we fill in the following information 
name = models.CharField(max_length=255)  # Patient's full name
    nin = models.CharField(max_length=20, unique=True, null=True, blank=True)  # National ID Number
    phone_no = models.CharField(max_length=15)  
    age = models.IntegerField()  
    village = models.CharField(max_length=255)  
    parish = models.CharField(max_length=255)  
    sub_county = models.CharField(max_length=255)  
    district = models.CharField(max_length=255)  
    occupation = models.CharField(max_length=255)
    marital_status = models.CharField(
        max_length=20, choices=[('Single', 'Single'), ('Married', 'Married')]
    )  
    and this will be filled byt that information from the other tables in the system  that carry THt  INFO LIKE THE USER TABLE AND THE LOICATION TABLE BUT FOR THAT USER
    AND AFTER THAT THE SYSTEM SHOULD SEND A SUCCESS MESSAGE THAT THE USER HAVE BEEN ADMITTED AND IS UR PATIENT AS A SUCCESS MESSAGE 
    THE DOCTOR FIELD SHOULBE FILLED WITH THE REQUEST .USER  SINCE THAT WILL BE UR DOCTOR 
    AND LASTLY  IN THE TEPLATE I DONT WANT FORM.AS P I NEED THE  FIELDS INPUTR DISIGNED  AND DISTRIBUTED LIKE HOW FORMS LOOK LIKE  WITH THE EMBLEM AT THE TOP AND BELOW IT THE NAME OF THE PATIENT 
    