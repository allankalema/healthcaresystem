so sonce we have that i wan you to use that on the  calendar in the dashboard for customer so that the system can extract the date  from the attribute   and displays it on the calendar on the date it will happen so that the patient request.user can see their next visit on the calendar in ther dashboard for the next appointment 
this is the template 
{% extends 'base.html' %}
{% load static %}

{% block content %}
<main class="mt-16 sm:mt-20 min-h-screen p-4 sm:p-6 bg-gray-100">
    <div class="container mx-auto">
        <!-- Welcome Message -->
        <div class="bg-white p-6 rounded-lg shadow-lg mb-6">
            <h2 class="text-2xl sm:text-3xl font-bold text-hotpink-dark mb-4">Welcome, {{ patient.user.first_name }}!</h2>
            <p class="text-gray-700">Hereâ€™s your personalized dashboard for managing your pregnancy journey.</p>
        </div>

        <!-- Quick Actions -->
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
              <!-- View Prescriptions -->
            <a href="{% url 'my_prescriptions' %}" class="bg-hotpink text-white p-6 rounded-lg shadow-lg hover:bg-hotpink-light transition duration-300 flex items-center justify-center">
                <i class="bi bi-prescription2 text-2xl mr-2"></i>
                <span class="text-lg font-semibold">View Prescriptions</span>
            </a>
                 <!-- Emergency -->
            <a href="{% url 'report_emergency' %}" class="bg-hotpink text-white p-6 rounded-lg shadow-lg hover:bg-hotpink-light transition duration-300 flex items-center justify-center">
                <i class="bi bi-exclamation-triangle text-2xl mr-2"></i>
                <span class="text-lg font-semibold">Emergency</span>
            </a>
        </div>

        <!-- Antenatal Card Section -->
        <div id="antenatal-card" class="bg-white p-6 rounded-lg shadow-lg mb-6">
            <h3 class="text-xl font-semibold text-hotpink-dark mb-4">Antenatal Card</h3>
            {% if antenatal_card %}
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                        <p class="text-gray-700"><strong>Health Unit:</strong> {{ antenatal_card.health_unit }}</p>
                        <p class="text-gray-700"><strong>Registration Number:</strong> {{ antenatal_card.reg_no }}</p>
                        <p class="text-gray-700"><strong>Name:</strong> {{ antenatal_card.name }}</p>
                        <p class="text-gray-700"><strong>Phone Number:</strong> {{ antenatal_card.phone_no }}</p>
                        <p class="text-gray-700"><strong>Age:</strong> {{ antenatal_card.age }}</p>
                    </div>
                    <div>
                        <a href="{% url 'antenatal_card_details' antenatal_card.id %}" class="text-hotpink hover:text-hotpink-light">View Details</a>
                    </div>
                </div>
            {% else %}
                <p class="text-gray-700">No antenatal card found. Please contact your healthcare provider.</p>
            {% endif %}
        </div>

        <!-- Prescriptions Section -->
        <div id="prescriptions" class="bg-white p-6 rounded-lg shadow-lg mb-6">
            <h3 class="text-xl font-semibold text-hotpink-dark mb-4">Prescriptions</h3>
            {% if prescriptions %}
                <div class="space-y-4">
                    {% for prescription in prescriptions %}
                        <div class="p-4 border border-gray-200 rounded-lg">
                            <p class="text-gray-700"><strong>Disease/Condition:</strong> {{ prescription.disease_condition }}</p>
                            <p class="text-gray-700"><strong>Prescription Date:</strong> {{ prescription.prescription_date }}</p>
                            <p class="text-gray-700"><strong>Follow-up Date:</strong> {{ prescription.follow_up_date }}</p>
                            <p class="text-gray-700"><strong>Status:</strong> {% if prescription.cleared %}Cleared{% else %}Active{% endif %}</p>
                            <a href="{% url 'prescription_details' prescription.id %}" class="text-hotpink hover:text-hotpink-light">View Details</a>
                        </div>
                    {% endfor %}
                </div>
            {% else %}
                <p class="text-gray-700">No prescriptions found.</p>
            {% endif %}
        </div>

        <!-- Location Section -->
        <div class="bg-white p-6 rounded-lg shadow-lg mb-6">
            <h3 class="text-xl font-semibold text-hotpink-dark mb-4">Location Details</h3>
            {% if location %}
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                        <p class="text-gray-700"><strong>Village:</strong> {{ location.village }}</p>
                        <p class="text-gray-700"><strong>Parish:</strong> {{ location.parish }}</p>
                    </div>
                    <div>
                        <p class="text-gray-700"><strong>Sub County:</strong> {{ location.sub_county }}</p>
                        <p class="text-gray-700"><strong>District:</strong> {{ location.district }}</p>
                    </div>
                </div>
            {% else %}
                <p class="text-gray-700">No location details found. Please update your profile.</p>
            {% endif %}
        </div>

        <!-- Calendar Section -->
        <div class="bg-white p-6 rounded-lg shadow-lg">
            <h3 class="text-xl font-semibold text-hotpink-dark mb-4">Next Visits</h3>
            <div id="calendar"></div>
        </div>
    </div>
</main>

<!-- FullCalendar CSS -->
<link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet">

<!-- FullCalendar JS -->
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>

<!-- Bootstrap Tooltip (for hover effect) -->
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>

<!-- Pass next_visits data to JavaScript -->
{{ next_visits|json_script:"next-visits-data" }}

<!-- Calendar Initialization Script -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const calendarEl = document.getElementById('calendar');

        // Retrieve the data from the JSON script tag
        const nextVisits = JSON.parse(document.getElementById('next-visits-data').textContent);
        console.log('Next Visits Data:', nextVisits);  // Debugging: Check if data is correct

        // Initialize FullCalendar
        const calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',  // Default view
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,timeGridDay'
            },
            events: nextVisits,  // Use the static data
            eventDidMount: function (info) {
                console.log('Event Mounted:', info.event);  // Debugging: Check if event is mounted
                // Add hover effect to show the antenatal card name
                const tooltip = new bootstrap.Tooltip(info.el, {
                    title: info.event.title,
                    placement: 'top',
                    trigger: 'hover',
                    container: 'body'
                });
            },
            eventContent: function (info) {
                // Customize event content
                return { html: `<div class="fc-event-title">${info.event.title}</div>` };
            },
            eventClick: function (info) {
                // Handle event click (optional)
                alert('Visit for: ' + info.event.title);
            }
        });
        console.log('Next Visits Data:', nextVisits);


        calendar.render();
    });
</script>

<!-- Calendar Styling -->
<style>
    #calendar {
        max-width: 100%;
        margin: 0 auto;
        height: 500px; /* Adjust height as needed */
    }

    .fc-event {
        background-color: #ff69b4; /* Hot pink color */
        border: none;
        cursor: pointer;
    }

    .fc-event:hover {
        background-color: #ff1493; /* Darker pink on hover */
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
        #calendar {
            height: 400px; /* Smaller height for mobile screens */
        }

        /* Adjust calendar header for small screens */
        .fc-header-toolbar {
            flex-direction: row;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .fc-header-toolbar .fc-toolbar-chunk {
            margin-bottom: 0.5rem;
        }

        /* Make buttons smaller on small screens */
        .fc-header-toolbar .fc-button {
            font-size: 12px;
            padding: 0.25rem 0.5rem;
        }

        /* Adjust week view for small screens */
        .fc-timeGridWeek-view .fc-timegrid-slots {
            font-size: 12px; /* Smaller font size for week view */
        }
    }
</style>
{% endblock %}
and this is the view
@login_required
@patient
def patient_dashboard(request):
    user = request.user

    patient = Patient.objects.filter(user=user).first()
    location = Location.objects.filter(user=user).first()
    antenatal_card = AntenatalCard.objects.filter(user=user).first()
    prescriptions = Prescription.objects.filter(patient=user).order_by('-prescription_date')

    # Fetch next visit dates for the user's antenatal cards
    next_visits = []
    if antenatal_card and antenatal_card.next_visit:
        next_visits.append({
            'title': antenatal_card.name,
            'start': antenatal_card.next_visit.isoformat(),
            'allDay': True,
        })

    context = {
    'patient': patient,
    'location': location,
    'antenatal_card': antenatal_card,
    'prescriptions': prescriptions,
    'next_visits': json.dumps(next_visits, cls=DjangoJSONEncoder),  # Serialize to JSON
}

    return render(request, 'dashboards/patient_dashboard.html', context)
 the inisital implementation didn't work do discard that and do this one 
thisis the model
from django.db import models
from accounts.models import User
from django.utils.timezone import now

class AntenatalCard(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='antenatal_patients')  # Links to the registered patient
    Doctor = models.ForeignKey(User, on_delete=models.CASCADE, related_name='antenatal_doctors', default=1)  # Links to the assigned doctor
    
    health_unit = models.CharField(max_length=255, blank=True, null=True )  # Health facility name
    reg_no = models.CharField(max_length=100, blank=True, null=True, unique=True)  # Unique registration number
    name = models.CharField(max_length=255)  # Patient's full name
    nin = models.CharField(max_length=20, unique=True, null=True, blank=True)  # National ID Number
    phone_no = models.CharField(max_length=15)  
    age = models.IntegerField(blank=True, null=True)  
    village = models.CharField(max_length=255)  
    parish = models.CharField(max_length=255)  
    sub_county = models.CharField(max_length=255)  
    district = models.CharField(max_length=255)  
    occupation = models.CharField(max_length=255)  
    religion = models.CharField(max_length=100, null=True, blank=True)  
    education_level = models.CharField(max_length=100, null=True, blank=True)  
    tribe = models.CharField(max_length=100, null=True, blank=True)  
    marital_status = models.CharField(
        max_length=20, choices=[('Single', 'Single'), ('Married', 'Married')]
    )

    next_of_kin_name = models.CharField(max_length=255,blank=True, null=True)  
    next_of_kin_phone = models.CharField(max_length=15, blank=True, null=True)  
    next_of_kin_relationship = models.CharField(max_length=100, blank=True, null=True)  
    next_of_kin_address = models.TextField(blank=True, null=True)  

    gravida = models.IntegerField(blank=True, null=True)  # Number of pregnancies
    para = models.IntegerField(blank=True, null=True)  # Number of deliveries after 28 weeks
    abortions = models.IntegerField(blank=True, null=True)  # Number of pregnancy losses before 28 weeks

    presenting_complaints = models.TextField(null=True, blank=True)  
    first_day_of_lnmp = models.DateField(blank=True, null=True)  # Last Normal Menstrual Period
    edd = models.DateField(blank=True, null=True)  # Estimated Due Date
    weeks_of_amenorrhea = models.IntegerField(blank=True, null=True)  # Number of weeks since last period
    complications_of_pregnancy = models.TextField(null=True, blank=True)  
    hospitalization = models.BooleanField(default=False ,blank=True, null=True)  
    hospitalization_reason = models.TextField(null=True, blank=True)
    Doctor = models.ForeignKey(User, on_delete=models.CASCADE)
    
    next_visit = models.DateTimeField(null=True, blank=True)  # Date and time of the next visit
  

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Antenatal Card for {self.name} ({self.reg_no})"
    
    @property
    def next_visit_info(self):
        return f"Next Visit: {self.next_visit}, Doctor: {self.doctor.get_full_name()}, Patient: {self.user.get_full_name()}"
        

# ----------------------- SEPARATE TABLES FOR TABULAR DATA -----------------------

class PreviousObstetricHistory(models.Model):
    antenatal_card = models.ForeignKey(AntenatalCard, on_delete=models.CASCADE, related_name="previous_obstetric_history")
    recorded_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    pregnancy_year = models.IntegerField()
    abortions_below_12_weeks = models.IntegerField()
    abortions_above_12_weeks = models.IntegerField()
    premature_births = models.IntegerField()
    full_term_deliveries = models.IntegerField()
    delivery_type = models.CharField(max_length=255)
    place_of_delivery = models.CharField(max_length=255)
    third_stage_complications = models.TextField(null=True, blank=True)
    puerperium = models.TextField(null=True, blank=True)
    baby_alive = models.BooleanField(default=True)
    stillbirth_or_nnd = models.BooleanField(default=False)
    baby_sex = models.CharField(max_length=10, choices=[('Male', 'Male'), ('Female', 'Female')])
    birth_weight = models.FloatField()
    immunization_status = models.CharField(max_length=255)
    baby_health_condition = models.TextField(null=True, blank=True)
    
    created_at = models.DateTimeField(default=now)

    def __str__(self):
        return f"Previous Pregnancy Record ({self.pregnancy_year}) for {self.antenatal_card.name}"


class AntenatalProgressExamination(models.Model):
    antenatal_card = models.ForeignKey(AntenatalCard, on_delete=models.CASCADE, related_name="progress_examinations")
    recorded_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    visit_date = models.DateField(default=now)
    fundal_height = models.FloatField()
    presentation = models.CharField(max_length=255)
    fetal_heart_rate = models.IntegerField()
    varicose_or_oedema = models.CharField(max_length=255, null=True, blank=True)
    urine_test_results = models.TextField(null=True, blank=True)
    iron_folic_acid_pills = models.IntegerField(null=True, blank=True)
    complaints_and_remarks = models.TextField(null=True, blank=True)

    created_at = models.DateTimeField(default=now)

    def __str__(self):
        return f"Antenatal Progress for {self.antenatal_card.name} on {self.visit_date}"


class UltrasoundReport(models.Model):
    antenatal_card = models.ForeignKey(AntenatalCard, on_delete=models.CASCADE, related_name="ultrasound_reports")
    recorded_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    ultrasound_date = models.DateField(default=now)
    gestational_age = models.IntegerField(null=True, blank=True)
    placenta_details = models.TextField(null=True, blank=True)
    amniotic_fluid = models.TextField(null=True, blank=True)
    complications = models.TextField(null=True, blank=True)

    created_at = models.DateTimeField(default=now)

    def __str__(self):
        return f"Ultrasound Report for {self.antenatal_card.name} on {self.ultrasound_date}"


class Prescription(models.Model):
    patient = models.ForeignKey(User, related_name='prescriptions', on_delete=models.CASCADE)  # Links to the registered patient
    doctor = models.ForeignKey(User, related_name='prescribed_by', on_delete=models.CASCADE)  # Links to the doctor who prescribed
    disease_condition = models.CharField(max_length=255)  # Disease or condition the patient is being treated for
    prescription_date = models.DateField(default=now)  # Date the prescription was made   
    follow_up_date = models.DateField(null=True, blank=True)  # Latest date when the patient should have this checked    
    extra_information = models.TextField(null=True, blank=True)  # Any additional information about the prescription
    cleared = models.BooleanField(default=False)  # Whether the prescription has been cleared or not
    cleared_date = models.DateTimeField(null=True, blank=True)  # Date when the prescription was cleared

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Prescription for {self.patient.username} prescribed by {self.doctor.username} for {self.disease_condition}"

class Medication(models.Model):
    """
    Model to handle the medications within a prescription.
    Links to a Prescription and stores dosage, medication name, and prescription date.
    """
    prescription = models.ForeignKey(Prescription, related_name='medications', on_delete=models.CASCADE)
    medication_name = models.CharField(max_length=255)  # Medication prescribed
    dosage = models.TextField()  # Dosage instructions
    prescription_date = models.DateField(default=now)  # Date the medication was prescribed

    def __str__(self):
        return f"{self.medication_name} prescribed on {self.prescription_date}"

 
class Emergency(models.Model):
    antenatal_card = models.ForeignKey(
        AntenatalCard, on_delete=models.CASCADE, related_name='emergencies'
    )  # Links to the patientâ€™s antenatal card
    reported_by = models.ForeignKey(
        User, on_delete=models.SET_NULL, null=True, related_name='reported_emergencies'
    )
    emergency_type = models.TextField(null=True, blank=True)  # Open text field for emergency type
    description = models.TextField(null=True, blank=True)  # Additional details about the emergency
    reported_at = models.DateTimeField(default=now)  # Time the emergency was reported
    action_taken = models.TextField(null=True, blank=True)  # What was done in response to the emergency
    resolved = models.BooleanField(default=False)  # Whether the emergency has been resolved
    resolved_at = models.DateTimeField(null=True, blank=True)  # When the emergency was resolved

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Emergency for {self.antenatal_card.name} reported on {self.reported_at.strftime('%Y-%m-%d %H:%M')}"

 and anither
 from django.db import models
from django.utils import timezone
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from django.utils.translation import gettext_lazy as _


# ----------------------- USER MANAGER -----------------------
class CustomUserManager(BaseUserManager):
    def create_user(self, username, first_name, last_name, email, password=None, **extra_fields):
        """Create and return a regular user with given details"""
        if not username:
            raise ValueError(_('The Username field is required'))
        if not first_name:
            raise ValueError(_('The First Name field is required'))
        if not last_name:
            raise ValueError(_('The Last Name field is required'))
        if not email:
            raise ValueError(_('The Email field is required'))

        email = self.normalize_email(email)
        user = self.model(
            username=username,
            first_name=first_name,
            last_name=last_name,
            email=email,
            **extra_fields
        )
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, username, first_name, last_name, email, password=None, **extra_fields):
        """Create and return a superuser with all permissions"""
        extra_fields.setdefault('is_superuser', True)
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_doctor', True)
        extra_fields.setdefault('is_patient', True)
        extra_fields.setdefault('is_hospital', True)

        return self.create_user(username, first_name, last_name, email, password, **extra_fields)


# ----------------------- USER MODEL -----------------------
class User(AbstractBaseUser, PermissionsMixin):
    """
    Central user model shared across doctors, patients, and hospitals.
    """
    username = models.CharField(max_length=150, unique=True)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.EmailField(unique=True)

    # Common Details
    date_of_birth = models.DateField(null=True, blank=True)
    nin = models.CharField(max_length=20, unique=True, null=True, blank=True)
    marital_status = models.CharField(
        max_length=20,
        choices=[('Single', 'Single'), ('Married', 'Married')],
        null=True, blank=True
    )
    contact = models.CharField(max_length=15, null=True, blank=True)
    health_insurance_details = models.TextField(null=True, blank=True)
    government_scheme_eligibility = models.TextField(null=True, blank=True)

    # Role-based Flags
    is_doctor = models.BooleanField(default=False)
    is_patient = models.BooleanField(default=False)
    is_hospital = models.BooleanField(default=False)

    # System Fields
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(auto_now=True)

    objects = CustomUserManager()

    USERNAME_FIELD = 'username'
    REQUIRED_FIELDS = ['first_name', 'last_name', 'email']

    def get_full_name(self):
        """Returns the full name of the user."""
        return f"{self.first_name} {self.last_name}".strip()

    def get_short_name(self):
        """Returns the first name of the user."""
        return self.first_name

    def __str__(self):
        return self.username


# ----------------------- LOCATION MODEL -----------------------
class Location(models.Model):
    """
    Stores location details for users (patients, doctors, hospitals).
    """
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="location")
    village = models.CharField(max_length=255, null=True, blank=True)
    parish = models.CharField(max_length=255, null=True, blank=True)
    sub_county = models.CharField(max_length=255, null=True, blank=True)
    district = models.CharField(max_length=255, null=True, blank=True)
    address = models.TextField(null=True, blank=True)  # Generic address field

    def __str__(self):
        return f"Location for {self.user.username}"


# ----------------------- PATIENT MODEL -----------------------
class Patient(models.Model):
    """
    Stores patient-specific details.
    """
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="patient_profile")
    age = models.IntegerField(null=True, blank=True)
    home_address = models.TextField(null=True, blank=True)
    number_of_children = models.IntegerField(null=True, blank=True)
    date_of_last_period = models.DateField(null=True, blank=True)
    occupation = models.CharField(max_length=255, null=True, blank=True)

    # Pregnancy & Medical History
    gestational_age = models.IntegerField(null=True, blank=True)  # Weeks of pregnancy
    expected_due_date = models.DateField(null=True, blank=True)
    type_of_pregnancy = models.CharField(max_length=20, choices=[('Single', 'Single'), ('Twins', 'Twins'), ('Multiples', 'Multiples')], null=True, blank=True)
    previous_pregnancies = models.IntegerField(null=True, blank=True)
    delivery_history = models.TextField(null=True, blank=True)
    high_risk_factors = models.TextField(null=True, blank=True)
    fetal_health = models.TextField(null=True, blank=True)

    # Medical History
    pre_existing_conditions = models.TextField(null=True, blank=True)
    previous_surgeries = models.TextField(null=True, blank=True)
    current_medications = models.TextField(null=True, blank=True)
    allergies = models.TextField(null=True, blank=True)
    blood_type = models.CharField(max_length=5, null=True, blank=True)
    family_medical_history = models.TextField(null=True, blank=True)

    # Lifestyle
    diet_preferences = models.TextField(null=True, blank=True)
    exercise_level = models.TextField(null=True, blank=True)
    smoking_alcohol_drug_use = models.TextField(null=True, blank=True)
    mental_health_status = models.TextField(null=True, blank=True)

    def __str__(self):
        return f"Patient Profile: {self.user.username}"


# ----------------------- DOCTOR MODEL -----------------------
class Doctor(models.Model):
    """
    Stores doctor-specific details.
    """
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="doctor_profile")
    work_address = models.TextField(null=True, blank=True)
    certificate_number = models.CharField(max_length=100, unique=True)
    contact_number = models.CharField(max_length=15, null=True, blank=True)
    health_facility = models.CharField(max_length=255, null=True, blank=True)
    medical_field = models.CharField(max_length=255, null=True, blank=True)
    experience_years = models.IntegerField(null=True, blank=True)
    education_level = models.CharField(max_length=255, null=True, blank=True)
    rank_title = models.CharField(max_length=255, null=True, blank=True)

    def __str__(self):
        return f"Dr. {self.user.first_name} {self.user.last_name}"


# ----------------------- HOSPITAL MODEL -----------------------
class Hospital(models.Model):
    """
    Stores hospital-specific details.
    """
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="hospital_profile")
    name = models.CharField(max_length=255, unique=True)
    rank_reviews = models.TextField(null=True, blank=True)
    departments = models.TextField(null=True, blank=True)
    bed_availability = models.IntegerField(null=True, blank=True)
    maternity_ward_occupancy = models.IntegerField(null=True, blank=True)
    number_of_healthcare_professionals = models.IntegerField(null=True, blank=True)
    ambulance_response_time = models.CharField(max_length=255, null=True, blank=True)
    specialized_maternity_care = models.TextField(null=True, blank=True)
    delivery_facilities = models.TextField(null=True, blank=True)
    blood_bank_availability = models.BooleanField(default=False)
    room_types_facilities = models.TextField(null=True, blank=True)
    infection_control_measures = models.TextField(null=True, blank=True)
    delivery_package_costs = models.TextField(null=True, blank=True)
    insurance_coverage = models.TextField(null=True, blank=True)
    government_schemes_supported = models.TextField(null=True, blank=True)

    def __str__(self):
        return f"Hospital: {self.name}"